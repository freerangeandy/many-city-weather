{"version":3,"sources":["containers/InputContainer.js","shared/utility.js","components/DisplayWeather.js","components/DisplayCity.js","containers/DisplayContainer.js","App.js","index.js"],"names":["InputContainer","props","setSelectedCity","clickHandler","className","publicKey","onSuggestionSelect","result","lat","lng","text","name","coords","inputClass","Button","variant","color","startIcon","Icon","onClick","isNight","hour","DisplayWeather","icon","weatherInfo","adjustedIcon","replace","iconSrc","hourClass","getHourClass","date","getDisplayHour","temp","toFixed","Avatar","src","description","DisplayCity","useState","cityForecast","setCityForecast","useEffect","fetchForecast","cityTiles","coordParams","fetch","then","response","ok","errorMessage","status","statusText","Error","json","responseJson","forecasts","getForecasts","hourly","catch","error","console","message","rawList","map","getWeatherInfo","weatherObj","fahrenheit","timeStamp","dt","dateObj","Date","month","getMonth","day","getDate","getHours","main","weather","cloudCover","clouds","windSpeed","wind_speed","slice","index","Grid","item","xs","key","container","spacing","DisplayContainer","displayList","cityList","App","selectedCity","setCityList","newCityList","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b32a5b33.chunk.js","sourcesContent":["import React from 'react'\nimport MapboxAutocomplete from 'react-mapbox-autocomplete'\nimport Button from '@material-ui/core/Button'\nimport Icon from '@material-ui/core/Icon'\n\nconst InputContainer = (props) => {\n  const { setSelectedCity, clickHandler } = props\n\n  const suggestionSelect = (result, lat, lng, text) => {\n    const coords = [lat, lng]\n    const cityObj = { name: result, coords: coords }\n    setSelectedCity(cityObj)\n  }\n\n  return (\n    <div className=\"add-city\">\n      <MapboxAutocomplete\n        publicKey=\"pk.eyJ1IjoiZnJlZXJhbmdlYW5keSIsImEiOiJja2J0bXoxMnAwYmpnMnlxdmYyOTVqNXA0In0.1u16EPjQEgr4LwHinZZKjA\"\n        onSuggestionSelect={suggestionSelect}\n        inputClass=\"city-input\"\n      />\n      <div className=\"add-button\">\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          startIcon={<Icon>add_circle</Icon>}\n          onClick={clickHandler}\n        > Add&nbsp;Location </Button>\n      </div>\n    </div>\n  )\n}\n\nexport default InputContainer\n","const getDisplayHour = (hour) => {\n  if (hour === 0) {\n    return \"12am\"\n  } else if (hour > 12 ){\n    const newHour = hour - 12\n    return `${newHour}pm`\n  } else {\n    return `${hour}am`\n  }\n}\n\nconst isNight = (hour) => (hour >= 21 || hour < 6)\n\nconst getHourClass = (hour) => {\n  return isNight(hour) ? \"night-bg\" : \"day-bg\"\n}\n\nconst getIcon = (hour, icon) => {\n  let newIcon\n  if (isNight(hour)) {\n    newIcon = icon.replace('d', 'n')\n  } else {\n    newIcon = icon.replace('n', 'd')\n  }\n  return newIcon\n}\n\nconst kelvinToFahrenheit = (kelvin) => {\n  const celsius = kelvin - 273.14\n  return celsius * 9/5 + 32\n}\n\nexport {\n  getDisplayHour,\n  getHourClass,\n  getIcon,\n  kelvinToFahrenheit\n}\n","import React from 'react'\nimport Avatar from '@material-ui/core/Avatar';\n\nimport {\n  getDisplayHour,\n  getHourClass,\n  getIcon\n} from '../shared/utility'\n\nconst DisplayWeather = (props) => {\n  const { weatherInfo } = props\n\n  const adjustedIcon = getIcon(weatherInfo.hour, weatherInfo.icon)\n  const iconSrc = `http://openweathermap.org/img/wn/${adjustedIcon}@2x.png`\n  const hourClass = getHourClass(weatherInfo.hour)\n\n  return (\n    <div className=\"weather-info-tile\">\n      <h3>\n        {weatherInfo.date}\n      </h3>\n      <h2>\n        {getDisplayHour(weatherInfo.hour)}\n      </h2>\n      <div className={`weather-card ${hourClass}`}>\n        <h2>\n          {weatherInfo.temp.toFixed(0)} Â°F\n        </h2>\n        <Avatar className=\"weather-icon\" src={iconSrc}/>\n        <h3>\n          {weatherInfo.description}\n        </h3>\n      </div>\n    </div>\n  )\n\n}\n\nexport default DisplayWeather\n","import React, { useState, useEffect } from 'react'\nimport Grid from '@material-ui/core/Grid'\n\nimport DisplayWeather from './DisplayWeather'\nimport { kelvinToFahrenheit } from '../shared/utility'\n\nconst OPEN_WEATHER_PATH = 'https://api.openweathermap.org/data/2.5/'\nconst EXCLUSIONS = `&exclude=current,minutely,daily`\nconst WEATHER_API_KEY = '85605c622914f5dad8bccbb102c2769c'\n\nconst DisplayCity = (props) => {\n  const { name, coords } = props\n  const [cityForecast, setCityForecast] = useState(null)\n\n  useEffect(() => {\n    fetchForecast(coords)\n  }, [])\n\n  const fetchForecast = (coords) => {\n    const coordParams = `lat=${coords[0]}&lon=${coords[1]}`\n    fetch(`${OPEN_WEATHER_PATH}onecall?${coordParams}${EXCLUSIONS}&appid=${WEATHER_API_KEY}`)\n    .then(response => {\n      if (response.ok) {\n        return response\n      } else {\n        let errorMessage = `${response.status} (${response.statusText})`\n        let error = new Error(errorMessage)\n        throw(error)\n      }\n    })\n    .then(response => response.json())\n    .then(responseJson => {\n      const forecasts = getForecasts(responseJson.hourly)\n      setCityForecast(forecasts)\n    })\n    .catch((error) => console.error(`Error in fetch: ${error.message}`))\n  }\n\n  const getForecasts = (rawList) => rawList.map(getWeatherInfo)\n  const getWeatherInfo = (weatherObj) => {\n    const fahrenheit = kelvinToFahrenheit(weatherObj.temp)\n    const timeStamp = weatherObj.dt * 1000\n    const dateObj = new Date(timeStamp)\n    const month = dateObj.getMonth()\n    const day = dateObj.getDate()\n    const date = `${month}/${day}`\n    const hour = dateObj.getHours()\n    return {\n      date,\n      hour,\n      temp: fahrenheit,\n      main: weatherObj.weather[0].main,\n      description: weatherObj.weather[0].description,\n      icon: weatherObj.weather[0].icon,\n      cloudCover: weatherObj.clouds,\n      windSpeed: weatherObj.wind_speed\n    }\n  }\n\n  let cityTiles\n  if (cityForecast) {\n    cityTiles = cityForecast\n    .slice(0,6)\n    .map((weatherInfo, index) => {\n      return (\n        <Grid item xs={2} key={index}>\n          <DisplayWeather weatherInfo={weatherInfo} />\n        </Grid>\n      )\n    })\n  }\n\n  return (\n    <li className=\"display-city\">\n      <h1 className=\"city-name\">{name}</h1>\n      <Grid container spacing={1}>\n        {cityTiles}\n      </Grid>\n    </li>\n  )\n}\n\nexport default DisplayCity\n","import React from 'react'\n\nimport DisplayCity from '../components/DisplayCity'\n\nconst DisplayContainer = (props) => {\n  const { cityList } = props\n\n  let displayList = cityList.map(({ name, coords }, index) => {\n    return <DisplayCity key={index} name={name} coords={coords} />\n  })\n\n  return (\n    <div>\n      <ul>\n        {displayList}\n      </ul>\n    </div>\n  )\n}\n\nexport default DisplayContainer\n","import React, {useState} from 'react';\n\nimport InputContainer from './containers/InputContainer'\nimport DisplayContainer from './containers/DisplayContainer'\nimport './styles/index.css';\n\nfunction App() {\n  const [selectedCity, setSelectedCity] = useState(null)\n  const [cityList, setCityList] = useState([])\n\n  const addCityDisplay = () => {\n    if (selectedCity !== null) {\n      const newCityList = [...cityList, selectedCity]\n      setCityList(newCityList)\n      setSelectedCity(null)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"page-title\">How's the weather over there?</h1>\n      <InputContainer\n        setSelectedCity={setSelectedCity}\n        clickHandler={addCityDisplay}\n      />\n      <DisplayContainer\n        cityList={cityList}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}