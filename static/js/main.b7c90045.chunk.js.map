{"version":3,"sources":["containers/InputContainer.js","components/DisplayWeather.js","components/DisplayCity.js","containers/DisplayContainer.js","App.js","index.js"],"names":["InputContainer","props","setSelectedCity","clickHandler","className","publicKey","onSuggestionSelect","result","lat","lng","text","name","coords","inputClass","Button","variant","color","startIcon","Icon","onClick","DisplayWeather","hour","icon","weatherInfo","isNight","adjustedIcon","replace","iconSrc","hourClass","getClass","date","getDisplayHour","temp","toFixed","Avatar","src","description","DisplayCity","useState","cityInfo","setCityInfo","cityForecast","setCityForecast","cityWeather","setCityWeather","useEffect","fetchWeather","fetchForecast","cityName","cityTiles","fetch","then","response","ok","errorMessage","status","statusText","Error","json","responseJson","currentWeather","getWeatherInfo","console","log","catch","error","message","city","forecasts","getForecasts","list","rawList","map","weatherObj","isCurrent","dt_txt","fahrenheit","main","timeStamp","dt","dateObj","Date","month","getMonth","day","getDate","getHours","weather","cloudCover","clouds","windSpeed","wind","speed","slice","index","Grid","item","xs","key","container","spacing","DisplayContainer","displayList","cityList","App","selectedCity","setCityList","newCityList","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7c90045.chunk.js","sourcesContent":["import React from 'react'\nimport MapboxAutocomplete from 'react-mapbox-autocomplete'\nimport Button from '@material-ui/core/Button'\nimport Icon from '@material-ui/core/Icon'\n\nconst InputContainer = (props) => {\n  const { setSelectedCity, clickHandler } = props\n\n  const suggestionSelect = (result, lat, lng, text) => {\n    const coords = [lat, lng]\n    const cityObj = { name: result, coords: coords }\n    setSelectedCity(cityObj)\n  }\n\n  return (\n    <div className=\"add-city\">\n      <MapboxAutocomplete\n        publicKey=\"pk.eyJ1IjoiZnJlZXJhbmdlYW5keSIsImEiOiJja2J0bXoxMnAwYmpnMnlxdmYyOTVqNXA0In0.1u16EPjQEgr4LwHinZZKjA\"\n        onSuggestionSelect={suggestionSelect}\n        inputClass=\"city-input\"\n      />\n      <div className=\"add-button\">\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          startIcon={<Icon>add_circle</Icon>}\n          onClick={clickHandler}\n        > Add&nbsp;Location </Button>\n      </div>\n    </div>\n  )\n}\n\nexport default InputContainer\n","import React from 'react'\nimport Avatar from '@material-ui/core/Avatar';\n\nconst DisplayWeather = (props) => {\n  const { weatherInfo } = props\n\n  const getDisplayHour = (hour) => {\n    if (hour === 0) {\n      return \"12am\"\n    } else if (hour > 12 ){\n      const newHour = hour - 12\n      return `${newHour}pm`\n    } else {\n      return `${hour}am`\n    }\n  }\n\n  const isNight = (hour) => (hour >= 21 || hour < 6)\n\n  const getClass = (hour) => {\n    return isNight(hour) ? \"night-bg\" : \"day-bg\"\n  }\n\n  const getIcon = (hour, icon) => {\n    let newIcon\n    if (isNight(hour)) {\n      newIcon = icon.replace('d', 'n')\n    } else {\n      newIcon = icon.replace('n', 'd')\n    }\n    return newIcon\n  }\n\n  const adjustedIcon = getIcon(weatherInfo.hour, weatherInfo.icon)\n  const iconSrc = `http://openweathermap.org/img/wn/${adjustedIcon}@2x.png`\n  const hourClass = getClass(weatherInfo.hour)\n\n  return (\n    <div className=\"weather-info-tile\">\n      <h3>\n        {weatherInfo.date}\n      </h3>\n      <h2>\n        {getDisplayHour(weatherInfo.hour)}\n      </h2>\n      <div className={`weather-card ${hourClass}`}>\n        <h2>\n          {weatherInfo.temp.toFixed(0)} Â°F\n        </h2>\n        <Avatar className=\"weather-icon\" src={iconSrc}/>\n        <h3>\n          {weatherInfo.description}\n        </h3>\n      </div>\n    </div>\n  )\n\n}\n\nexport default DisplayWeather\n","import React, { useState, useEffect } from 'react'\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid'\n\nimport DisplayWeather from './DisplayWeather'\n\nconst OPEN_WEATHER_PATH = 'https://api.openweathermap.org/data/2.5/'\nconst WEATHER_API_KEY = '85605c622914f5dad8bccbb102c2769c'\n\nconst DisplayCity = (props) => {\n  const { name, coords } = props\n  const [cityInfo, setCityInfo] = useState(null)\n  const [cityForecast, setCityForecast] = useState(null)\n  const [cityWeather, setCityWeather] = useState(null)\n\n  useEffect(() => {\n    fetchWeather(coords)\n    fetchForecast(coords)\n  }, [])\n\n  const fetchWeather = (coords) => {\n    fetch(`${OPEN_WEATHER_PATH}weather?lat=${coords[0]}&lon=${coords[1]}&appid=${WEATHER_API_KEY}`)\n    .then(response => {\n      if (response.ok) {\n        return response\n      } else {\n        let errorMessage = `${response.status} (${response.statusText})`\n        let error = new Error(errorMessage)\n        throw(error)\n      }\n    })\n    .then(response => response.json())\n    .then(responseJson => {\n      const currentWeather = getWeatherInfo(responseJson)\n      setCityWeather(currentWeather)\n      console.log(responseJson)\n    })\n    .catch((error) => console.error(`Error in fetch: ${error.message}`))\n  }\n\n  const fetchForecast = (coords) => {\n    fetch(`${OPEN_WEATHER_PATH}forecast?lat=${coords[0]}&lon=${coords[1]}&appid=${WEATHER_API_KEY}`)\n    .then(response => {\n      if (response.ok) {\n        return response\n      } else {\n        let errorMessage = `${response.status} (${response.statusText})`\n        let error = new Error(errorMessage)\n        throw(error)\n      }\n    })\n    .then(response => response.json())\n    .then(responseJson => {\n      setCityInfo(responseJson.city)\n      const forecasts = getForecasts(responseJson.list)\n      setCityForecast(forecasts)\n      console.log(responseJson)\n    })\n    .catch((error) => console.error(`Error in fetch: ${error.message}`))\n  }\n\n  const getForecasts = (rawList) => rawList.map(getWeatherInfo)\n\n  const getWeatherInfo = (weatherObj) => {\n    const isCurrent = !weatherObj.dt_txt\n    const celsius = weatherObj.main.temp - 273.14\n    const fahrenheit = celsius * 9/5 + 32\n    const timeStamp = !isCurrent ? weatherObj.dt_txt : weatherObj.dt * 1000\n    const dateObj = new Date(timeStamp)\n    const month = dateObj.getMonth()\n    const day = dateObj.getDate()\n    const date = `${month}/${day}`\n    const hour = dateObj.getHours()\n    return {\n      date,\n      hour,\n      temp: fahrenheit,\n      main: weatherObj.weather[0].main,\n      description: weatherObj.weather[0].description,\n      icon: weatherObj.weather[0].icon,\n      cloudCover: weatherObj.clouds,\n      windSpeed: weatherObj.wind.speed\n    }\n  }\n\n  let cityName\n  let cityTiles\n  if (cityInfo) {\n    cityName = cityInfo.name\n  }\n  if (cityWeather && cityForecast) {\n    cityTiles = [cityWeather, ...cityForecast]\n    .slice(0,6)\n    .map((weatherInfo, index) => {\n      return (\n        <Grid item xs={2} key={index}>\n          <DisplayWeather weatherInfo={weatherInfo} />\n        </Grid>\n      )\n    })\n  }\n\n  return (\n    <li className=\"display-city\">\n      <h1 className=\"city-name\">{cityName}</h1>\n      <Grid container spacing={1}>\n      {cityTiles}\n      </Grid>\n    </li>\n  )\n}\n\nexport default DisplayCity\n","import React from 'react'\n\nimport DisplayCity from '../components/DisplayCity'\n\nconst DisplayContainer = (props) => {\n  const { cityList } = props\n\n  let displayList\n  displayList = cityList.map(({ name, coords }, index) => {\n    return <DisplayCity key={index} name={name} coords={coords} />\n  })\n\n  return (\n    <div>\n      <ul>\n        {displayList}\n      </ul>\n    </div>\n  )\n}\n\nexport default DisplayContainer\n","import React, {useState} from 'react';\nimport Container from '@material-ui/core/Container';\n\nimport InputContainer from './containers/InputContainer'\nimport DisplayContainer from './containers/DisplayContainer'\nimport './styles/index.css';\n\nfunction App() {\n  const [selectedCity, setSelectedCity] = useState(null)\n  const [cityList, setCityList] = useState([])\n\n  const addCityDisplay = () => {\n    if (selectedCity !== null) {\n      const newCityList = [...cityList, selectedCity]\n      setCityList(newCityList)\n      setSelectedCity(null)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"page-title\">How's the weather over there?</h1>\n      <InputContainer\n        setSelectedCity={setSelectedCity}\n        clickHandler={addCityDisplay}\n      />\n      <DisplayContainer\n        cityList={cityList}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}