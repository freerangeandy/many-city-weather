{"version":3,"sources":["components/CitySearch/CityAddButton.js","components/CitySearch/CitySearchField.js","components/CitySearch/CitySearchPane.js","shared/utility.js","components/CityDisplay/WeatherTile.js","components/CityDisplay/CityWeather.js","components/CityDisplay/CityDisplayPane.js","containers/ManyCityWeather.js","App.js","index.js"],"names":["CityAddButton","props","clickHandler","className","Button","variant","color","startIcon","Icon","onClick","CitySearchField","suggestionSelect","publicKey","onSuggestionSelect","inputClass","CitySearchPane","addCityDisplay","isNight","hour","getWeatherInfo","weatherObj","fahrenheit","temp","timeStamp","dt","dateObj","Date","month","getMonth","day","getDate","date","getHours","main","weather","description","icon","cloudCover","clouds","windSpeed","wind_speed","WeatherTile","weatherInfo","adjustedIcon","replace","iconSrc","hourClass","getHourClass","getDisplayHour","toFixed","Avatar","src","CityWeather","name","cityTiles","forecasts","slice","map","index","Grid","item","xs","key","container","spacing","CityDisplayPane","displayList","cityList","ManyCityWeather","useState","selectedCity","setSelectedCity","setCityList","fetchForecast","city","coordParams","coords","fetch","then","response","ok","errorMessage","status","statusText","Error","json","responseJson","hourly","newCityList","catch","error","console","message","result","lat","lng","text","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kRAmBeA,EAfO,SAACC,GAAW,IACxBC,EAAiBD,EAAjBC,aAER,OACE,yBAAKC,UAAU,cACb,kBAACC,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNC,UAAW,kBAACC,EAAA,EAAD,mBACXC,QAASP,GAJX,uB,iBCQSQ,EAZS,SAACT,GAAW,IAC1BU,EAAqBV,EAArBU,iBAER,OACE,kBAAC,IAAD,CACEC,UAPa,oGAQbC,mBAAoBF,EACpBG,WAAW,gBCIFC,EAXQ,SAACd,GAAW,IACzBU,EAAqCV,EAArCU,iBAAkBK,EAAmBf,EAAnBe,eAE1B,OACE,yBAAKb,UAAU,YACb,kBAAC,EAAD,CAAiBQ,iBAAkBA,IACnC,kBAAC,EAAD,CAAeT,aAAcc,M,gBCA7BC,EAAU,SAACC,GAAD,OAAWA,GAAQ,IAAMA,EAAO,GAsB1CC,EAAiB,SAACC,GACtB,IAAMC,EALW,GAKqBD,EAAWE,KANxB,QACN,EAAI,GAMjBC,EAA4B,IAAhBH,EAAWI,GACvBC,EAAU,IAAIC,KAAKH,GACnBI,EAAQF,EAAQG,WAChBC,EAAMJ,EAAQK,UAGpB,MAAO,CACLC,KAHQ,UAAMJ,EAAN,YAAeE,GAIvBX,KAHWO,EAAQO,WAInBV,KAAMD,EACNY,KAAMb,EAAWc,QAAQ,GAAGD,KAC5BE,YAAaf,EAAWc,QAAQ,GAAGC,YACnCC,KAAMhB,EAAWc,QAAQ,GAAGE,KAC5BC,WAAYjB,EAAWkB,OACvBC,UAAWnB,EAAWoB,aCfXC,EA7BK,SAACxC,GAAW,IDYfiB,EAAMkB,ECXbM,EAAgBzC,EAAhByC,YAEFC,GDSSzB,ECTcwB,EAAYxB,KDSpBkB,ECT0BM,EAAYN,KDWvDnB,EAAQC,GACAkB,EAAKQ,QAAQ,IAAK,KAElBR,EAAKQ,QAAQ,IAAK,MCbxBC,EAAO,2CAAuCF,EAAvC,WACPG,EDGa,SAAC5B,GACpB,OAAOD,EAAQC,GAAQ,WAAa,SCJlB6B,CAAaL,EAAYxB,MAE3C,OACE,yBAAKf,UAAU,qBACb,4BACGuC,EAAYX,MAEf,4BDjBiB,SAACb,GACtB,OAAa,IAATA,EACK,OACEA,EAAO,GAEV,GAAN,OADgBA,EAAO,GACvB,MAEM,GAAN,OAAUA,EAAV,MCWK8B,CAAeN,EAAYxB,OAE9B,yBAAKf,UAAS,uBAAkB2C,IAC9B,4BACGJ,EAAYpB,KAAK2B,QAAQ,GAD5B,UAGA,kBAACC,EAAA,EAAD,CAAQ/C,UAAU,eAAegD,IAAKN,IACtC,4BACGH,EAAYP,gBCERiB,EAvBK,SAACnD,GAAW,IACtBoD,EAAoBpD,EAApBoD,KAEJC,EAFwBrD,EAAdsD,UAGXC,MAAM,EAAE,GACRC,KAAI,SAACf,EAAagB,GACjB,OACE,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,IAAKJ,GACrB,kBAAC,EAAD,CAAahB,YAAaA,QAKlC,OACE,wBAAIvC,UAAU,gBACZ,wBAAIA,UAAU,aAAakD,GAC3B,kBAACM,EAAA,EAAD,CAAMI,WAAS,EAACC,QAAS,GACtBV,KCGMW,EArBS,SAAChE,GAAW,IAG9BiE,EAFiBjE,EAAbkE,SAEmBV,KAAI,WAAsBC,GAAW,IAA9BL,EAA6B,EAA7BA,KAAME,EAAuB,EAAvBA,UACtC,OACE,kBAAC,EAAD,CACEO,IAAKJ,EACLL,KAAMA,EACNE,UAAWA,OAIjB,OACE,yBAAKpD,UAAU,gBACb,4BACG+D,KCyCME,EAlDS,SAACnE,GAAW,IAAD,EACOoE,mBAAS,MADhB,mBAC1BC,EAD0B,KACZC,EADY,OAEDF,mBAAS,IAFR,mBAE1BF,EAF0B,KAEhBK,EAFgB,KAiB3BC,EAAgB,SAACC,GACrB,IAAMC,EAAW,cAAUD,EAAKE,OAAO,GAAtB,gBAAgCF,EAAKE,OAAO,IAC7DC,MAAM,GAAD,OAvBiB,2CAuBjB,mBAAgCF,GAAhC,OAtBO,kCAsBP,kBArBe,qCAsBnBG,MAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAEP,IAAIE,EAAY,UAAMF,EAASG,OAAf,aAA0BH,EAASI,WAAnC,KAEhB,MADY,IAAIC,MAAMH,MAIzBH,MAAK,SAAAC,GAAQ,OAAIA,EAASM,UAC1BP,MAAK,SAAAQ,GACJ,IAAM/B,EAAyB+B,EAAaC,OJTR9B,IAAItC,GIUlCqE,EAAW,sBAAOrB,GAAP,gBAAsBO,EAAtB,CAA4BnB,gBAC7CiB,EAAYgB,MAEbC,OAAM,SAACC,GAAD,OAAWC,QAAQD,MAAR,0BAAiCA,EAAME,cAG3D,OACE,oCACE,wBAAIzF,UAAU,cAAd,iCACA,kBAAC,EAAD,CACEQ,iBA/BmB,SAACkF,EAAQC,EAAKC,EAAKC,GAG1CzB,EADgB,CAAElB,KAAMwC,EAAQjB,OADjB,CAACkB,EAAKC,GAC2BxC,UAAW,QA8BvDvC,eAvCiB,WACA,OAAjBsD,IACFG,EAAcH,GACdC,EAAgB,UAsChB,kBAAC,EAAD,CAAiBJ,SAAUA,MC1ClB8B,MARf,WACE,OACE,yBAAK9F,UAAU,OACb,kBAAC,EAAD,QCHN+F,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.07fd5c15.chunk.js","sourcesContent":["import React from 'react'\nimport Button from '@material-ui/core/Button'\nimport Icon from '@material-ui/core/Icon'\n\nconst CityAddButton = (props) => {\n  const { clickHandler } = props\n\n  return (\n    <div className=\"add-button\">\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        startIcon={<Icon>add_circle</Icon>}\n        onClick={clickHandler}\n      > Add&nbsp;Location </Button>\n    </div>\n  )\n}\n\nexport default CityAddButton\n","import React from 'react'\nimport MapboxAutocomplete from 'react-mapbox-autocomplete'\n\nconst MAPBOX_KEY = \"pk.eyJ1IjoiZnJlZXJhbmdlYW5keSIsImEiOiJja2J0bXoxMnAwYmpnMnlxdmYyOTVqNXA0In0.1u16EPjQEgr4LwHinZZKjA\"\n\nconst CitySearchField = (props) => {\n  const { suggestionSelect } = props\n\n  return (\n    <MapboxAutocomplete\n      publicKey={MAPBOX_KEY}\n      onSuggestionSelect={suggestionSelect}\n      inputClass=\"city-input\"\n    />\n  )\n}\n\nexport default CitySearchField\n","import React from 'react'\n\nimport CityAddButton from './CityAddButton'\nimport CitySearchField from './CitySearchField'\n\nconst CitySearchPane = (props) => {\n  const { suggestionSelect, addCityDisplay } = props\n\n  return (\n    <div className=\"add-city\">\n      <CitySearchField suggestionSelect={suggestionSelect} />\n      <CityAddButton clickHandler={addCityDisplay} />\n    </div>\n  )\n}\n\nexport default CitySearchPane\n","const getDisplayHour = (hour) => {\n  if (hour === 0) {\n    return \"12am\"\n  } else if (hour > 12 ){\n    const newHour = hour - 12\n    return `${newHour}pm`\n  } else {\n    return `${hour}am`\n  }\n}\n\nconst isNight = (hour) => (hour >= 21 || hour < 6)\n\nconst getHourClass = (hour) => {\n  return isNight(hour) ? \"night-bg\" : \"day-bg\"\n}\n\nconst getIcon = (hour, icon) => {\n  let newIcon\n  if (isNight(hour)) {\n    newIcon = icon.replace('d', 'n')\n  } else {\n    newIcon = icon.replace('n', 'd')\n  }\n  return newIcon\n}\n\nconst kelvinToFahrenheit = (kelvin) => {\n  const celsius = kelvin - 273.14\n  return celsius * 9/5 + 32\n}\n\nconst getForecasts = (rawList) => rawList.map(getWeatherInfo)\nconst getWeatherInfo = (weatherObj) => {\n  const fahrenheit = kelvinToFahrenheit(weatherObj.temp)\n  const timeStamp = weatherObj.dt * 1000\n  const dateObj = new Date(timeStamp)\n  const month = dateObj.getMonth()\n  const day = dateObj.getDate()\n  const date = `${month}/${day}`\n  const hour = dateObj.getHours()\n  return {\n    date,\n    hour,\n    temp: fahrenheit,\n    main: weatherObj.weather[0].main,\n    description: weatherObj.weather[0].description,\n    icon: weatherObj.weather[0].icon,\n    cloudCover: weatherObj.clouds,\n    windSpeed: weatherObj.wind_speed\n  }\n}\n\nexport {\n  getDisplayHour,\n  getHourClass,\n  getIcon,\n  getForecasts\n}\n","import React from 'react'\nimport Avatar from '@material-ui/core/Avatar';\n\nimport { getDisplayHour, getHourClass, getIcon } from '../../shared/utility'\n\nconst WeatherTile = (props) => {\n  const { weatherInfo } = props\n\n  const adjustedIcon = getIcon(weatherInfo.hour, weatherInfo.icon)\n  const iconSrc = `http://openweathermap.org/img/wn/${adjustedIcon}@2x.png`\n  const hourClass = getHourClass(weatherInfo.hour)\n\n  return (\n    <div className=\"weather-info-tile\">\n      <h3>\n        {weatherInfo.date}\n      </h3>\n      <h2>\n        {getDisplayHour(weatherInfo.hour)}\n      </h2>\n      <div className={`weather-card ${hourClass}`}>\n        <h2>\n          {weatherInfo.temp.toFixed(0)} Â°F\n        </h2>\n        <Avatar className=\"weather-icon\" src={iconSrc}/>\n        <h3>\n          {weatherInfo.description}\n        </h3>\n      </div>\n    </div>\n  )\n\n}\n\nexport default WeatherTile\n","import React from 'react'\nimport Grid from '@material-ui/core/Grid'\n\nimport WeatherTile from './WeatherTile'\n\nconst CityWeather = (props) => {\n  const { name, forecasts } = props\n\n  let cityTiles = forecasts\n    .slice(0,6)\n    .map((weatherInfo, index) => {\n      return (\n        <Grid item xs={2} key={index}>\n          <WeatherTile weatherInfo={weatherInfo} />\n        </Grid>\n      )\n    })\n\n  return (\n    <li className=\"city-weather\">\n      <h1 className=\"city-name\">{name}</h1>\n      <Grid container spacing={1}>\n        {cityTiles}\n      </Grid>\n    </li>\n  )\n}\n\nexport default CityWeather\n","import React from 'react'\n\nimport CityWeather from './CityWeather'\n\nconst CityDisplayPane = (props) => {\n  const { cityList } = props\n\n  let displayList = cityList.map(({ name, forecasts }, index) => {\n    return (\n      <CityWeather\n        key={index}\n        name={name}\n        forecasts={forecasts}\n      />)\n  })\n\n  return (\n    <div className=\"city-display\">\n      <ul>\n        {displayList}\n      </ul>\n    </div>\n  )\n}\n\nexport default CityDisplayPane\n","import React, { Fragment, useState } from 'react';\n\nimport CitySearchPane from '../components/CitySearch/CitySearchPane'\nimport CityDisplayPane from '../components/CityDisplay/CityDisplayPane'\nimport { getForecasts } from '../shared/utility'\n\nconst OPEN_WEATHER_PATH = 'https://api.openweathermap.org/data/2.5/'\nconst EXCLUSIONS = `&exclude=current,minutely,daily`\nconst WEATHER_API_KEY = '85605c622914f5dad8bccbb102c2769c'\n\nconst ManyCityWeather = (props) => {\n  const [selectedCity, setSelectedCity] = useState(null)\n  const [cityList, setCityList] = useState([])\n\n  const addCityDisplay = () => {\n    if (selectedCity !== null) {\n      fetchForecast(selectedCity)\n      setSelectedCity(null)\n    }\n  }\n\n  const suggestionSelect = (result, lat, lng, text) => {\n    const coords = [lat, lng]\n    const cityObj = { name: result, coords: coords, forecasts: null }\n    setSelectedCity(cityObj)\n  }\n\n  const fetchForecast = (city) => {\n    const coordParams = `lat=${city.coords[0]}&lon=${city.coords[1]}`\n    fetch(`${OPEN_WEATHER_PATH}onecall?${coordParams}${EXCLUSIONS}&appid=${WEATHER_API_KEY}`)\n    .then(response => {\n      if (response.ok) {\n        return response\n      } else {\n        let errorMessage = `${response.status} (${response.statusText})`\n        let error = new Error(errorMessage)\n        throw(error)\n      }\n    })\n    .then(response => response.json())\n    .then(responseJson => {\n      const forecasts = getForecasts(responseJson.hourly)\n      const newCityList = [...cityList, { ...city, forecasts }]\n      setCityList(newCityList)\n    })\n    .catch((error) => console.error(`Error in fetch: ${error.message}`))\n  }\n\n  return (\n    <>\n      <h1 className=\"page-title\">How's the weather over there?</h1>\n      <CitySearchPane\n        suggestionSelect={suggestionSelect}\n        addCityDisplay={addCityDisplay}\n      />\n      <CityDisplayPane cityList={cityList} />\n    </>\n  )\n}\n\nexport default ManyCityWeather;\n","import React from 'react';\n\nimport ManyCityWeather from './containers/ManyCityWeather'\nimport './styles/index.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ManyCityWeather />\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}