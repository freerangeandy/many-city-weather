{"version":3,"sources":["components/CitySearch/CityAddButton.js","components/CitySearch/CitySearchField.js","components/CitySearch/CitySearchPane.js","shared/utility.js","components/CityDisplay/WeatherTile.js","components/CityDisplay/CityHeader.js","components/CityDisplay/CityWeather.js","components/CityDisplay/CityDisplayPane.js","containers/ManyCityWeather.js","App.js","index.js"],"names":["CityAddButton","props","clickHandler","className","Button","variant","color","startIcon","Icon","onClick","CitySearchField","suggestionSelect","searchFieldRef","publicKey","onSuggestionSelect","inputClass","ref","CitySearchPane","addCityDisplay","isNight","hour","getWeatherInfo","localSecondsOffset","weatherObj","fahrenheit","temp","timeStamp","dt","dateObj","Date","month","getMonth","day","getDate","date","getHours","systemSecondsOffset","getTimezoneOffset","localInfo","getLocalTime","main","weather","description","icon","cloudCover","clouds","windSpeed","wind_speed","secondsOffset","localDateObj","localMonth","localDay","localDate","localHour","WeatherTile","weatherInfo","showLocal","adjustedDate","adjustedHour","adjustedIcon","replace","iconSrc","cardClass","getCardClass","timeClass","getDisplayHour","toFixed","Avatar","src","CityHeader","timeLabel","showOffsetHandler","faClock","name","deleteHandler","faTimes","CityWeather","forecasts","cityTiles","slice","map","index","Grid","item","xs","key","container","spacing","CityDisplayPane","cityList","displayList","CSSTransition","classNames","timeout","enter","exit","TransitionGroup","ManyCityWeather","useState","selectedCity","setSelectedCity","setCityList","useRef","fetchForecast","city","coordParams","coords","fetch","then","response","ok","errorMessage","status","statusText","Error","json","responseJson","rawList","offset","hourly","timezone_offset","newCity","newCityList","catch","error","console","message","result","lat","lng","text","current","state","query","cityIndex","citySelected","updatedShowLocal","updatedCity","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.04e7b1cf.chunk.js","sourcesContent":["import React from 'react'\nimport Button from '@material-ui/core/Button'\nimport Icon from '@material-ui/core/Icon'\n\nconst CityAddButton = (props) => {\n  const { clickHandler } = props\n\n  return (\n    <div className=\"add-button\">\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        startIcon={<Icon>add_circle</Icon>}\n        onClick={clickHandler}\n      > Add&nbsp;Location </Button>\n    </div>\n  )\n}\n\nexport default CityAddButton\n","import React from 'react'\nimport MapboxAutocomplete from 'react-mapbox-autocomplete'\n\nconst MAPBOX_KEY = \"pk.eyJ1IjoiZnJlZXJhbmdlYW5keSIsImEiOiJja2J0bXoxMnAwYmpnMnlxdmYyOTVqNXA0In0.1u16EPjQEgr4LwHinZZKjA\"\n\nconst CitySearchField = (props) => {\n  const { suggestionSelect, searchFieldRef } = props\n\n  return (\n    <MapboxAutocomplete\n      publicKey={MAPBOX_KEY}\n      onSuggestionSelect={suggestionSelect}\n      inputClass=\"city-input\"\n      ref={searchFieldRef}\n    />\n  )\n}\n\nexport default CitySearchField\n","import React from 'react'\n\nimport CityAddButton from './CityAddButton'\nimport CitySearchField from './CitySearchField'\n\nconst CitySearchPane = (props) => {\n  const { suggestionSelect, addCityDisplay, searchFieldRef } = props\n\n  return (\n    <div className=\"add-city\">\n      <CitySearchField\n        suggestionSelect={suggestionSelect}\n        searchFieldRef={searchFieldRef}\n        />\n      <CityAddButton clickHandler={addCityDisplay} />\n    </div>\n  )\n}\n\nexport default CitySearchPane\n","const getDisplayHour = (hour) => {\n  if (hour === 0) {\n    return \"12am\"\n  } else if (hour > 12 ){\n    const newHour = hour - 12\n    return `${newHour}pm`\n  } else {\n    return `${hour}am`\n  }\n}\n\nconst isNight = (hour) => (hour >= 21 || hour < 6)\n\nconst getCardClass = (hour) => {\n  return isNight(hour) ? \"night-bg\" : \"day-bg\"\n}\n\nconst getIcon = (hour, icon) => {\n  let newIcon\n  if (isNight(hour)) {\n    newIcon = icon.replace('d', 'n')\n  } else {\n    newIcon = icon.replace('n', 'd')\n  }\n  return newIcon\n}\n\nconst kelvinToFahrenheit = (kelvin) => {\n  const celsius = kelvin - 273.14\n  return celsius * 9/5 + 32\n}\n\nconst getForecasts = (rawList, offset) => rawList.map(getWeatherInfo(offset))\nconst getWeatherInfo = (localSecondsOffset) => (weatherObj) => {\n  const fahrenheit = kelvinToFahrenheit(weatherObj.temp)\n  const timeStamp = weatherObj.dt * 1000\n  const dateObj = new Date(timeStamp)\n  const month = dateObj.getMonth() + 1\n  const day = dateObj.getDate()\n  const date = `${month}/${day}`\n  const hour = dateObj.getHours()\n  const systemSecondsOffset = dateObj.getTimezoneOffset() * 60\n  const localInfo = getLocalTime(timeStamp, systemSecondsOffset + localSecondsOffset)\n  return {\n    date,\n    hour,\n    ...localInfo,\n    temp: fahrenheit,\n    main: weatherObj.weather[0].main,\n    description: weatherObj.weather[0].description,\n    icon: weatherObj.weather[0].icon,\n    cloudCover: weatherObj.clouds,\n    windSpeed: weatherObj.wind_speed\n  }\n}\n\nconst getLocalTime = (timeStamp, secondsOffset) => {\n  const msOffset = secondsOffset * 1000\n  const localDateObj = new Date(timeStamp + msOffset)\n  const localMonth = localDateObj.getMonth() + 1\n  const localDay = localDateObj.getDate()\n  const localDate = `${localMonth}/${localDay}`\n  const localHour = localDateObj.getHours()\n\n  return {\n    localDate,\n    localHour\n  }\n}\n\n\nexport {\n  getDisplayHour,\n  getCardClass,\n  getIcon,\n  getForecasts\n}\n","import React from 'react'\nimport Avatar from '@material-ui/core/Avatar';\n\nimport { getDisplayHour, getCardClass, getIcon } from '../../shared/utility'\n\nconst WeatherTile = (props) => {\n  const { weatherInfo, showLocal } = props\n\n  const adjustedDate = showLocal ? weatherInfo.localDate : weatherInfo.date\n  const adjustedHour = showLocal ? weatherInfo.localHour : weatherInfo.hour\n  const adjustedIcon = getIcon(adjustedHour, weatherInfo.icon)\n  const iconSrc = `http://openweathermap.org/img/wn/${adjustedIcon}@2x.png`\n  const cardClass = getCardClass(adjustedHour)\n  const timeClass = showLocal ? \"local-time\" : \"\"\n\n  return (\n    <div className=\"weather-info-tile\">\n      <div className={timeClass}>\n        <h3>\n          {adjustedDate}\n        </h3>\n        <h2>\n          {getDisplayHour(adjustedHour)}\n        </h2>\n      </div>\n      <div className={`weather-card ${cardClass}`}>\n        <h2>\n          {weatherInfo.temp.toFixed(0)} °F\n        </h2>\n        <Avatar className=\"weather-icon\" src={iconSrc}/>\n        <h3>\n          {weatherInfo.description}\n        </h3>\n      </div>\n    </div>\n  )\n\n}\n\nexport default WeatherTile\n","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\nimport { faClock } from '@fortawesome/free-solid-svg-icons'\n\nconst CityHeader = props => {\n  const timeClass = props.showLocal ? \"local-time\" : \"\"\n  const timeLabel = props.showLocal ? \"\" : \"hidden\"\n\n  return (\n    <div className=\"city-header\">\n      <div onClick={props.showOffsetHandler}>\n        <FontAwesomeIcon className={`icon-button ${timeClass}`} icon={ faClock } />\n        <span className={`local-time-label ${timeLabel}`}>LOCAL</span>\n      </div>\n      <div className=\"city-name\"><h1>{props.name}</h1></div>\n      <div onClick={props.deleteHandler}>\n        <FontAwesomeIcon className=\"icon-button\" icon={ faTimes } />\n      </div>\n    </div>\n  )\n}\n\nexport default CityHeader\n","import React from 'react'\nimport Grid from '@material-ui/core/Grid'\n\nimport WeatherTile from './WeatherTile'\nimport CityHeader from './CityHeader'\n\nconst CityWeather = (props) => {\n  const { name, forecasts, showLocal, deleteHandler, showOffsetHandler } = props\n\n  let cityTiles = forecasts\n    .slice(0,6)\n    .map((weatherInfo, index) => {\n      return (\n        <Grid item xs={2} key={index}>\n          <WeatherTile weatherInfo={weatherInfo} showLocal={showLocal} />\n        </Grid>\n      )\n    })\n\n  return (\n    <li className=\"city-weather\">\n      <CityHeader\n        name={name}\n        showLocal={showLocal}\n        deleteHandler={deleteHandler}\n        showOffsetHandler={showOffsetHandler}\n      />\n      <Grid container spacing={1}>\n        {cityTiles}\n      </Grid>\n    </li>\n  )\n}\n\nexport default CityWeather\n","import React from 'react'\nimport  { TransitionGroup, CSSTransition } from 'react-transition-group'\n\nimport CityWeather from './CityWeather'\n\nconst CityDisplayPane = (props) => {\n  const { cityList, deleteHandler, showOffsetHandler } = props\n\n  let displayList = cityList.map(({ name, showLocal, forecasts }, index) => {\n    return (\n      <CSSTransition\n        key={index}\n        classNames=\"city-weather\"\n        timeout={{ enter: 250, exit: 250}}\n      >\n        <CityWeather\n          name={name}\n          forecasts={forecasts}\n          showLocal={showLocal}\n          deleteHandler={deleteHandler(index)}\n          showOffsetHandler={showOffsetHandler(index)}\n        />\n      </CSSTransition>\n    )\n  })\n\n  return (\n    <div className=\"city-display\">\n      <ul>\n        <TransitionGroup>\n          {displayList}\n        </TransitionGroup>\n      </ul>\n    </div>\n  )\n}\n\nexport default CityDisplayPane\n","import React, { useState, useRef } from 'react';\n\nimport CitySearchPane from '../components/CitySearch/CitySearchPane'\nimport CityDisplayPane from '../components/CityDisplay/CityDisplayPane'\nimport { getForecasts } from '../shared/utility'\n\nconst OPEN_WEATHER_PATH = 'https://api.openweathermap.org/data/2.5/'\nconst EXCLUSIONS = `&exclude=current,minutely,daily`\nconst WEATHER_API_KEY = '85605c622914f5dad8bccbb102c2769c'\n\nconst ManyCityWeather = (props) => {\n  const [selectedCity, setSelectedCity] = useState(null)\n  const [cityList, setCityList] = useState([])\n  const searchFieldRef = useRef(null)\n\n  const addCityDisplay = () => {\n    if (selectedCity !== null) {\n      fetchForecast(selectedCity)\n      setSelectedCity(null)\n      searchFieldRef.current.state.query = \"\"\n    }\n  }\n\n  const suggestionSelect = (result, lat, lng, text) => {\n    const coords = [lat, lng]\n    const cityObj = { name: result, coords: coords, forecasts: null }\n    setSelectedCity(cityObj)\n  }\n\n  const fetchForecast = (city) => {\n    const coordParams = `lat=${city.coords[0]}&lon=${city.coords[1]}`\n    fetch(`${OPEN_WEATHER_PATH}onecall?${coordParams}${EXCLUSIONS}&appid=${WEATHER_API_KEY}`)\n    .then(response => {\n      if (response.ok) {\n        return response\n      } else {\n        let errorMessage = `${response.status} (${response.statusText})`\n        let error = new Error(errorMessage)\n        throw(error)\n      }\n    })\n    .then(response => response.json())\n    .then(responseJson => {\n      const forecasts = getForecasts(responseJson.hourly, responseJson.timezone_offset)\n      const newCity = { ...city, showLocal: false, forecasts }\n      const newCityList = [...cityList, newCity]\n      setCityList(newCityList)\n    })\n    .catch((error) => console.error(`Error in fetch: ${error.message}`))\n  }\n\n  const cityDeleteHandler = (cityIndex) => () => {\n    const newCityList = [...cityList.slice(0, cityIndex), ...cityList.slice(cityIndex + 1)]\n    setCityList(newCityList)\n  }\n\n  const cityShowOffsetHandler = (cityIndex) => () => {\n    const citySelected = cityList[cityIndex]\n    const updatedShowLocal = !citySelected.showLocal\n    const updatedCity = { ...citySelected, showLocal: updatedShowLocal }\n    const newCityList = [\n      ...cityList.slice(0, cityIndex),\n      updatedCity,\n      ...cityList.slice(cityIndex + 1)\n    ]\n    setCityList(newCityList)\n  }\n\n  return (\n    <>\n      <h1 className=\"page-title\">How's the weather over there?</h1>\n      <CitySearchPane\n        suggestionSelect={suggestionSelect}\n        addCityDisplay={addCityDisplay}\n        searchFieldRef={searchFieldRef}\n      />\n      <CityDisplayPane\n        cityList={cityList}\n        deleteHandler={cityDeleteHandler}\n        showOffsetHandler={cityShowOffsetHandler}\n      />\n    </>\n  )\n}\n\nexport default ManyCityWeather;\n","import React from 'react';\n\nimport ManyCityWeather from './containers/ManyCityWeather'\nimport './styles/index.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ManyCityWeather />\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}